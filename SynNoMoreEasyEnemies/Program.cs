using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;

namespace SynNoMoreEasyEnemies
{
    public class Program
    {
        // Settings
        static Lazy<Settings> LazySettings = new Lazy<Settings>();
        static Settings settings => LazySettings.Value;

        // Initial setup
        public static async Task<int> Main(string[] args) {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out LazySettings
                )
                .SetTypicalOpen(GameRelease.SkyrimSE, "NoMoreEasyEnemies.esp")
                .Run(args);
        }

        // Let's get to work!
        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state) {

            Console.WriteLine($"***********************");
            Console.WriteLine($"Real work starting now!");
            Console.WriteLine($"***********************");

            // Convert our custom enum setting to proper level
            Level LevelModifierToReplace = new();
            switch (settings.LevelModifierToReplace) {
                case Settings.LevelSetting.Medium: { LevelModifierToReplace = Level.Medium; break; }
                case Settings.LevelSetting.Hard: { LevelModifierToReplace = Level.Hard; break; }
                case Settings.LevelSetting.VeryHard: { LevelModifierToReplace = Level.VeryHard; break; }
                default: throw new NotImplementedException("Somehow you set a invalid Level Modifier.");
            }

            //// Multipliers ////
            // Save existing (old) multipliers
            Dictionary<Level, float> oldMults = new();
            Dictionary<Level, GameSetting> multOverrides = new();

            foreach (var gmst in state.LoadOrder.PriorityOrder.OnlyEnabled().GameSetting().WinningOverrides()) {
                if (gmst.EditorID?.Contains("fLeveledActorMultEasy") == true) {
                    var gmstOverride = state.PatchMod.GameSettings.GetOrAddAsOverride(gmst);
                    var mult = ((GameSettingFloat)gmstOverride).Data;
                    oldMults.Add(Level.Easy, mult ?? 0f);
                    multOverrides.Add(Level.Easy, gmstOverride);
                    Console.WriteLine($"Old fLeveledActorMultEasy: {mult}");
                }
                else if (gmst.EditorID?.Contains("fLeveledActorMultMedium") == true) {
                    var gmstOverride = state.PatchMod.GameSettings.GetOrAddAsOverride(gmst);
                    var mult = ((GameSettingFloat)gmstOverride).Data;
                    oldMults.Add(Level.Medium, mult ?? 0f);
                    multOverrides.Add(Level.Medium, gmstOverride);
                    Console.WriteLine($"Old fLeveledActorMultMedium: {mult}");
                }
                else if (gmst.EditorID?.Contains("fLeveledActorMultHard") == true) {
                    var gmstOverride = state.PatchMod.GameSettings.GetOrAddAsOverride(gmst);
                    var mult = ((GameSettingFloat)gmstOverride).Data;
                    oldMults.Add(Level.Hard, mult ?? 0f);
                    multOverrides.Add(Level.Hard, gmstOverride);
                    Console.WriteLine($"Old fLeveledActorMultHard: {mult}");
                }
                else if (gmst.EditorID?.Contains("fLeveledActorMultVeryHard") == true) {
                    var gmstOverride = state.PatchMod.GameSettings.GetOrAddAsOverride(gmst);
                    var mult = ((GameSettingFloat)gmstOverride).Data;
                    oldMults.Add(Level.VeryHard, mult ?? 0f);
                    multOverrides.Add(Level.VeryHard, gmstOverride);
                    Console.WriteLine($"Old fLeveledActorMultVeryHard: {mult}");
                }
            }

            // Create new multiplier overrides
            switch (LevelModifierToReplace) {
                case Level.Medium: {
                        Console.WriteLine($"Per your settings, we will be replacing the 'Medium' modifier.");
                        ((GameSettingFloat)multOverrides[Level.Medium]).Data = oldMults[Level.Easy];
                        break;
					}
                case Level.Hard: {
                        Console.WriteLine($"Per your settings, we will be replacing the 'Hard' modifier.");
                        ((GameSettingFloat)multOverrides[Level.Medium]).Data = oldMults[Level.Easy];
                        ((GameSettingFloat)multOverrides[Level.Hard]).Data = oldMults[Level.Medium];
                        break;
                    }
                case Level.VeryHard: {
                        Console.WriteLine($"Per your settings, we will be replacing the 'VeryHard' modifier.");
                        ((GameSettingFloat)multOverrides[Level.Medium]).Data = oldMults[Level.Easy];
                        ((GameSettingFloat)multOverrides[Level.Hard]).Data = oldMults[Level.Medium];
                        ((GameSettingFloat)multOverrides[Level.VeryHard]).Data = oldMults[Level.Hard];
                        break;
                    }
                default: throw new NotImplementedException("Somehow you set a invalid Level Modifier.");
            }

            //// Modifiers ////
            // Create a map between the old and new level modifiers
            Dictionary<Level, Level> levelConversion = new();

            // Fill the conversion map
            switch (LevelModifierToReplace) {
                case Level.Medium: { 
                        levelConversion.Add(Level.Easy, Level.Medium); 
                        break; 
                    }
                case Level.Hard: { 
                        levelConversion.Add(Level.Easy, Level.Medium); 
                        levelConversion.Add(Level.Medium, Level.Hard); 
                        break; 
                    }
                case Level.VeryHard: {
                        levelConversion.Add(Level.Easy, Level.Medium);
                        levelConversion.Add(Level.Medium, Level.Hard);
                        levelConversion.Add(Level.Hard, Level.VeryHard);
                        break;
                    }
                default:
                    throw new NotImplementedException("Somehow you set a invalid Level Modifier.");
            }

            Console.WriteLine("Updating Placed NPC records (ACHR) with the new Level Modifiers...");

            int achrCount = 0;

            foreach (var achr in state.LoadOrder.PriorityOrder.OnlyEnabled().PlacedNpc().WinningContextOverrides(state.LinkCache)) {
                // If the ACHR has no base, skip it
                // Not even sure this is possible
                if (achr.Record.Base == null) { continue; }

                // If the ACHR has no Level Modifier, skip it                
                if (achr.Record.LevelModifier == null) { continue; }

                // If the Level Modifier is the one we're replacing, delete it
                if (achr.Record.LevelModifier == LevelModifierToReplace) {
                    // Create override
                    IPlacedNpc achrOverride = achr.GetOrAddAsOverride(state.PatchMod);
                    achrOverride.LevelModifier = null;
				}
                else if (levelConversion.ContainsKey((Level)achr.Record.LevelModifier)) {
                    // Create override
                    IPlacedNpc achrOverride = achr.GetOrAddAsOverride(state.PatchMod);
                    achrOverride.LevelModifier = levelConversion[(Level)achr.Record.LevelModifier];
                }

                achrCount++;
                if (achrCount % 1000 == 0) {
                    Console.WriteLine($"Processed {achrCount} records.");
                }
            }
            Console.WriteLine($"Processed {achrCount} records.");

            //// Leveled NPC Lists ////
            if (settings.RemoveFlag) {
                Console.WriteLine("Updating Leveled NPC Lists (LVLN) to prefer NPCs closer to the player's level.");

                int lvlnCount = 0;
                foreach (var lvln in state.LoadOrder.PriorityOrder.OnlyEnabled().LeveledNpc().WinningOverrides()) {

                    if (lvln.Flags.HasFlag(LeveledNpc.Flag.CalculateFromAllLevelsLessThanOrEqualPlayer)) {
                        var lvlnOverride = state.PatchMod.LeveledNpcs.GetOrAddAsOverride(lvln);
                        lvlnOverride.Flags = (int)lvlnOverride.Flags - LeveledNpc.Flag.CalculateFromAllLevelsLessThanOrEqualPlayer;
                    }

                    lvlnCount++;
                    if (lvlnCount % 100 == 0) {
                        Console.WriteLine($"Processed {lvlnCount} records.");
                    }
                }
            }
        }
    }
}
